<?php
/**
 * Created by PhpStorm.
 * User: pomazkinis
 * Date: 30.05.2019
 * Time: 12:40
 */


namespace ispomazkin\opel\controllers;

use Yii;
use yii\httpclient\CurlTransport;
use yii\web\Controller;
use yii\httpclient\Client;
use ispomazkin\chevrolet\Module;
use yii\helpers\Json;
use yii\web\NotFoundHttpException;
use yii\helpers\Url;

class OpelController extends Controller
{
    /**
     * int
     * Макс Кол-во секунд для ответа сервера
     */
    const TIMEOUT=2;

    /**
     * Макс Кол-во секунд для соединения с сервером
     */
    const CONNECTTIMEOUT=1;

    /**
     * @var null | string
     */
    protected $api_host=null;

    /**
     * @var null | string
     */
    protected $api_image_path=null;

    /**
     * @var null | string
     */
    protected $search_pattern=null;


    /**
     * @param $action
     * @return bool
     * @throws \yii\web\BadRequestHttpException
     */
    public function beforeAction($action)
    {
        $module = Yii::$app->getModule('opel');
        /* @var $module Module*/
        if (!$module)
            throw new \Exception('The module Opel was not configured in your app config file');

        if (!($this->api_host = $module->host))
            throw new \Exception('The property Host of Opel module was not configured in your app config file');

        if (!($this->api_image_path = $module->image_path))
            throw new \Exception('The property Image_path of Opel module was not configured in your app config file');

        if (!($this->search_pattern = $module->search_pattern))
            throw new \Exception('The property search_pattern of Opel module was not configured in your app config file');

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Отображение списка моделей по Годам
     */
    public function actionIndex()
    {
        $url = $this->api_host.'/chevrolet/get-years';

        $data = Json::decode($this->sendRequest($url));

        $this->createSeo('years',$data);

        return $this->render('index',[
            'data'=>$data,
        ]);
    }

    /**
     * @param $type years|categories|groups|subgroups|parts
     * @param $data array
     */
    protected function createSeo($type,$data)
    {
        switch($type)
        {
            case 'years':
                $this->view->title = 'Запчасти Шевроле';
                $this->view->registerMetaTag([
                    'name' => 'description',
                    'content' => $this->view->title
                ]);

                $this->view->registerMetaTag([
                    'name' => 'keywords',
                    'content' => $this->view->title
                ]);
                $this->view->params['breadcrumbs'][] =  $this->view->title;
                break;

            case 'categories':
                $this->view->title = 'Запчасти Шевроле';
                $this->view->registerMetaTag([
                    'name' => 'description',
                    'content' => $this->view->title
                ]);

                $this->view->registerMetaTag([
                    'name' => 'keywords',
                    'content' => $this->view->title
                ]);
                $this->view->params['breadcrumbs'][] =  ['label'=>$this->view->title,'url'=>Url::to(['chevrolet/index'])];
                $this->view->params['breadcrumbs'][] =  $data['model'].' '.$data['year'];
                break;

            case 'groups':
                $this->view->title = 'Запчасти Шевроле';
                $this->view->registerMetaTag([
                    'name' => 'description',
                    'content' => $this->view->title
                ]);

                $this->view->registerMetaTag([
                    'name' => 'keywords',
                    'content' => $this->view->title
                ]);

                $this->view->params['breadcrumbs'][] =  ['label'=>$this->view->title,'url'=>Url::to(['chevrolet/index'])];


                $this->view->params['breadcrumbs'][] =  ['label'=>$data['model'].' '.$data['year'],'url'=>Url::to(['chevrolet/categories',
                    'year_url'=>$data['model_url'],
                    ])];

                $this->view->params['breadcrumbs'][] = $data['category'];
                break;

            case 'sub-groups':
                $this->view->title = 'Запчасти Шевроле';
                $this->view->registerMetaTag([
                    'name' => 'description',
                    'content' => $this->view->title
                ]);

                $this->view->registerMetaTag([
                    'name' => 'keywords',
                    'content' => $this->view->title
                ]);

                $this->view->params['breadcrumbs'][] =  ['label'=>$this->view->title,'url'=>Url::to(['chevrolet/index'])];


                $this->view->params['breadcrumbs'][] =  ['label'=>$data['model'].' '.$data['year'],'url'=>Url::to(['chevrolet/categories',
                    'year_url'=>$data['model_url'],
                ])];

                $this->view->params['breadcrumbs'][] = [
                    'label'=> $data['category'],
                    'url' => Url::to(['chevrolet/groups','year_url'=>$data['model_url'],'category_url'=>$data['category_url'],
                        ])
                ];
                $this->view->params['breadcrumbs'][] = $data['group'];
                break;

            case 'parts' :
                $this->view->title = 'Запчасти Шевроле';
                $this->view->registerMetaTag([
                    'name' => 'description',
                    'content' => $this->view->title
                ]);

                $this->view->registerMetaTag([
                    'name' => 'keywords',
                    'content' => $this->view->title
                ]);

                $this->view->params['breadcrumbs'][] =  ['label'=>$this->view->title,'url'=>Url::to(['chevrolet/index'])];


                $this->view->params['breadcrumbs'][] =  ['label'=>$data['model'].' '.$data['year'],'url'=>Url::to(['chevrolet/categories',
                    'year_url'=>$data['model_url'],
                ])];

                $this->view->params['breadcrumbs'][] = [
                    'label'=> $data['category'],
                    'url' => Url::to(['chevrolet/groups','year_url'=>$data['model_url'],'category_url'=>$data['category_url'],
                    ])
                ];



                if (isset($data['subgroup'])  && $data['subgroup'])
                {


                    $this->view->params['breadcrumbs'][] = [
                        'label'=> $data['group'],
                        'url' => Url::to(['chevrolet/sub-groups',
                            'year_url'=>$data['model_url'],
                            'category_url'=>$data['category_url'],
                            'group_url'=>$data['group_url']
                        ])
                    ];

                    $this->view->params['breadcrumbs'][] = $data['subgroup'];


                }
                else
                {
                    $this->view->params['breadcrumbs'][] = $data['group'];

                }
                break;


        }
    }

    /**
     * @param $year_url
     * @return string
     * @throws NotFoundHttpException
     * @throws \yii\base\InvalidConfigException
     * @throws \yii\httpclient\Exception
     */
    public function actionCategories($year_url)
    {
        $url = $this->api_host.'/chevrolet/get-categories?url='.$year_url;
        $data = Json::decode($this->sendRequest($url));
        if ($data['status']!='ok')
            throw new NotFoundHttpException();

        $this->createSeo('categories',$data['body']);

        return $this->render('categories',[
            'data'=>$data['body'],
        ]);
    }


    public function actionGroups($year_url,$category_url)
    {
        $url = $this->api_host.'/chevrolet/get-groups?year_url='.$year_url.'&category_url='.$category_url;

        $data = Json::decode($this->sendRequest($url));
        if ($data['status']!='ok')
            throw new NotFoundHttpException();

        $this->createSeo('groups',$data['body']);

        $template = $data['body']['groups'][0]['is_last'] ? 'groups_last' : 'groups';

        return $this->render($template,[
            'data'=>$data['body'],
            'img_path'=>$this->api_host . $this->api_image_path
        ]);
    }


    /**
     * @param $year_url
     * @param $category_url
     * @param $group_url
     */
    public function actionSubGroups($year_url,$category_url,$group_url)
    {
        $url = $this->api_host.'/chevrolet/get-sub-groups?year_url='.$year_url.'&category_url='.$category_url.'&group_url='.$group_url;

        $data = Json::decode($this->sendRequest($url));
        if ($data['status']!='ok')
            throw new NotFoundHttpException();

        $this->createSeo('sub-groups',$data['body']);

        return $this->render('groups_last',[
            'data'=>$data['body'],
            'img_path'=>$this->api_host . $this->api_image_path
        ]);
    }


    /**
     * @param $model_url
     * @param $last_url
     */
    public function actionParts($year_url,$last_url)
    {
        $url = $this->api_host.'/chevrolet/get-parts?year_url='.$year_url.'&last_url='.$last_url;

        $data = Json::decode($this->sendRequest($url));

        if ($data['status']!='ok')
            throw new NotFoundHttpException();

        $this->createSeo('parts',$data['body']);

        return $this->render('parts',[
            'data'=>$data['body'],
            'img_path'=>$this->api_host . $this->api_image_path,
            'search_pattern'=>$this->search_pattern
        ]);

    }



    /**
     * @param $url
     * @throws \yii\base\InvalidConfigException
     * @throws \yii\httpclient\Exception
     * @return string
     *
     */
    protected function sendRequest($url)
    {
        $client = new Client([
            'transport' => CurlTransport::class
        ]);

        $result = $client->createRequest()
            ->setUrl($url)
            ->setOptions(['timeout'=>self::TIMEOUT,'connecttimeout'=>self::CONNECTTIMEOUT])
            ->send();

        return $result->content;
    }

}
